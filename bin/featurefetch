#!/usr/bin/env python

import argparse
import sys

import os

from os.path import dirname

import pandas as pd

from subprocess import call
from collections import defaultdict

from itertools import product

from pyranges import GRanges

from featurefetch.sort import (add_sort_feature, split_feature,
                               merge_features_dict)
from featurefetch.parse import parse_gtf
from featurefetch.regions import find_introns

parser = argparse.ArgumentParser(
    description="""Complex fetching and sorting and aggregation of features.
(Visit github.com/endrebak/featurefetch for examples and help.)
    """,
    prog=os.path.basename(__file__))


parser.add_argument(
    '--gtf',
    '-g',
    required=True,
    type=str,
    help='''GTF file to fetch features from.''')


parser.add_argument(
    '--outfolder',
    '-O',
    required=False,
    type=str,
    help='''If --outfolder is given, one featurefile is written to <outfolder>/<feature>.txt
for each feature.''')


parser.add_argument(
    '--outfile',
    '-o',
    required=True,
    type=str,
    help='''The file to write the results in.''')


parser.add_argument(
    '--keep-transcript',
    '-kt',
    required=False,
    type=str,
    default="all",
    help='''Which transcripts to keep during analyses. Removing some transcripts will
also remove the exons belonging to them. Currently available: longest, all.
Default: all.''')


parser.add_argument(
    '--sort-feature',
    '-sf',
    required=False,
    type=str,
    default="gene",
    help='''Feature to sort on. Typically available: gene, transcript, exon.''')


parser.add_argument(
    '--sort-on',
    '-so',
    required=False,
    type=str,
    help='''Characteristic to sort on. Currently available: Length.''')


parser.add_argument(
    '--keep-feature',
    '-kf',
    required=False,
    type=str,
    help='''Feature to keep: gene, transcript, exon, intron.''')


parser.add_argument(
    '--split',
    '-s',
    required=False,
    type=str,
    help='''Where to split --sort-on into groups. Currently available: Quartiles.''')


# parser.add_argument(
#     '--which-intron-exon',
#     '-wie',
#     required=False,
#     type=str,
#     default="all",
#     help='''Allows you to select a subset of introns/exons (if introns/exons are the feature to keep).
# Options: all, first, last, internal, first_and_last.''')


parser.add_argument(
    "--exclude-feature",
    "-x",
    required=False,
    type=str,
    help="Feature to exclude. E.g. if you want the exons (use --keep-feature exon), but do not want any exon that overlaps an intron you can use --exclude intron")


parser.add_argument(
    '--deeptools-output',
    '-do',
    action="store_true",
    default=False,
    help='''Write the output in the correct 7-column bed-like format for deeptools computematrix. (#chrom start end name score strand deepTools_group)''')


def remove_all_but_longest_transcript(df):

    transcripts_to_remove = []
    for g, gdf in df.groupby("GeneID"):
        tdf = gdf[(gdf.Feature == "transcript")]
        transcript_to_keep = tdf.loc[(tdf.End - tdf.Start).idxmax()].TranscriptID
        gene_transcripts_to_remove = tdf[~(tdf.TranscriptID == transcript_to_keep)].TranscriptID
        transcripts_to_remove.extend(gene_transcripts_to_remove)

    return df[~df.TranscriptID.isin(transcripts_to_remove)]

remove_position = {"first": slice(1, None), "last": slice(0, -1), "internal": [0, -1],
                   "first_and_last": slice(1, -1)}


def write_file(feature_df, feature, deeptools_output, outfolder):

    outfile = "{outfolder}/{feature}.txt".format(outfolder=args.outfolder,
                                                feature=feature)

    if deeptools_output:

        feature_df = feature_df["Chromosome Start End GeneID Score Strand Group".split()]
        feature_df.columns = "#chrom start end name score strand deepTools_group".split()

    feature_df.to_csv(outfile, sep="\t", index=False, na_rep="NA")


if __name__ == "__main__":

    args = parser.parse_args()

    if args.outfolder:
        call("mkdir -p {}".format(args.outfolder), shell=True)


    print("Parsing gtf.", file=sys.stderr)
    df = parse_gtf(args.gtf)

    if args.keep_transcript == "longest":
        print("Removing all but longest transcript.", file=sys.stderr)
        df = remove_all_but_longest_transcript(df)

    # if "intron" in (args.sort_feature, args.keep_feature, args.exclude_feature):
    print("Computing introns.", file=sys.stderr)
    intron_df = find_introns(df)
    df = df.append(intron_df).sort_values("TranscriptID")


    if args.sort_on and args.sort_feature:
        print("Sorting on {}".format(args.sort_feature), file=sys.stderr)
        df_with_sort_feature = add_sort_feature(df, args.sort_feature, args.sort_on)

        if args.split:
            print("Splitting {} into {}".format(args.sort_feature, args.split), file=sys.stderr)
            df_with_split = split_feature(df_with_sort_feature, args.split,
                                          args.sort_on, args.sort_feature)

            merge_col = merge_features_dict[args.sort_feature]

            df = df.merge(df_with_split, how="left", on=merge_col)


    if args.exclude_feature:
        print("Excluding feature {}".format(sort_feature, args.split), file=sys.stderr)
        exclude = GRanges(df.loc[args.exclude_feature == df.Feature])
        data = GRanges(df)

        df = (data - exclude).df



    idx_to_remove = dict()
    for intron_or_exon, remove_position_label in product("exon intron".split(), list(remove_position.keys())):

        remove_position_slice = remove_position[remove_position_label]

        indexes_to_remove = []

        subset_df = df[df.Feature == intron_or_exon]

        if remove_position_label in ["last", "first"]:
            for transcript, tdf in subset_df.groupby("TranscriptID"):
                # if the transript only has one exon, not interested in considering it first or last
                if len(tdf) == 1:
                    indexes_to_remove.extend(tdf.index.tolist())
                else:
                    idx = tdf.sort_values("ExonNumber").iloc[remove_position_slice].index.tolist()
                    indexes_to_remove.extend(idx)
        else:
            for transcript, tdf in subset_df.groupby("TranscriptID"):
                if len(tdf) == 1:
                    idx = tdf.sort_values("ExonNumber").iloc[remove_position_slice].index.tolist()
                    indexes_to_remove.extend(idx)


        idx_to_remove[intron_or_exon, remove_position_label] = indexes_to_remove


    df.loc[:, ["Start", "End"]] = df[["Start", "End"]].astype(int)


    if args.outfolder:
        for feature, feature_df in df.groupby("Feature"):

            if feature in "intron exon".split():
                for pos in remove_position:
                    idx = idx_to_remove[feature, pos]
                    fdf_pruned = feature_df[~feature_df.index.isin(idx)]
                    file_label = feature + "_" + pos
                    write_file(fdf_pruned, file_label, args.deeptools_output, args.outfolder)

            write_file(feature_df, feature, args.deeptools_output, args.outfolder)

    if dirname(args.outfile):
        call("mkdir -p {}".format(dirname(args.outfile)), shell=True)

    df.to_csv(args.outfile, sep="\t", index=False, na_rep="NA")
